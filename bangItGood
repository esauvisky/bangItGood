#!/usr/bin/env python3
"""
Module Docstring
"""

__author__ = "Your Name"
__version__ = "0.1.0"
__license__ = "MIT"

import argparse
import json
import re
from tkinter import messagebox
from glob import glob
import time

import logzero
from logzero import logger
from selenium import common, webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

POINTS_MALL_URL = "https://www.banggood.com/pointsmall.html"
LOTTERY_URL = "https://www.banggood.com/index.php?bid=24156&com=lottery&t=lotteryDraw&lottery_id=11"
LOGIN_PAGE_URL = "https://www.banggood.com/login.html"


def save_login_cookies(username=False, password=False):
    browser = webdriver.Chrome()
    browser.get(LOGIN_PAGE_URL)

    if not password:
        ## Blocking manual user input:
        browser.find_element_by_id('login-email').send_keys(username)
        messagebox.showinfo(
            title='Manual Login',
            message='Fill entry boxes, 2FA, click submit, wait for loading and click OK.')
    else:
        ## Nonblocking automatic input:
        browser.find_element_by_id('login-email').send_keys(username)
        browser.find_element_by_id('login-pwd').send_keys(password)
        browser.find_element_by_id('login-submit').click()

    ## Writes to file:
    filename = 'cookies/' + str(username) + '.json'
    with open(filename, 'w+') as file:
        file.write(json.dumps(browser.get_cookies()))

    return filename


def open_url(url, driver):
    """
    Opens an URL with a timeout

    Args:
        url ([type]): [description]
        driver ([type]): [description]
    """
    # (sometimes it hangs up)
    driver.implicitly_wait(15)
    driver.set_page_load_timeout(30)
    ## Alternative: https://intellipaat.com/community/10338/how-do-i-set-the-selenium-webdriver-get-timeout
    # WebDriverWait(driver,)

    try:
        logger.info('Opening %s', url)
        driver.get(url)
    except common.exceptions.TimeoutException:
        logger.warning('Got stuck at %s. Continuing...', url)
        driver.execute_script("window.stop();")
    except Exception as e:
        logger.critical('Some weird error happened! Will continue but meh...', exc_info=True)
        driver.execute_script("window.stop();")


def main(args):
    """ Main entry point of the app """
    logger.setLevel(args.verbose)

    logger.debug(args)

    if args.username:
        filename = save_login_cookies(username=args.username)
        logger.info('Saved cookies at %s', filename)
        return True

    try:
        if len(args.cookies) == 1:
            open(args.cookies[0], 'r')
    except NotADirectoryError:
        pass
    except (FileNotFoundError, IsADirectoryError):
        args.cookies = glob(
            args.cookies[0] if args.cookies[0].endswith('*') else args.cookies[0] + '*')

        try:
            open(args.cookies[0], 'r')
        except Exception as e:
            raise (e)

    for cookiefile in args.cookies:
        # Creates Driver
        options = webdriver.ChromeOptions()
        options.add_extension('./ublock.crx')
        options.add_argument('user-data-dir=./chrome-profile/')

        if args.quiet:
            options.add_argument('headless')

        driver = webdriver.Chrome(options=options)

        # if not args.quiet:
            # driver.set_window_rect(1920 + 1920 / 2, 0, 1920 / 2, 1080 / (2/3))
            # driver.set_window_rect(1920/2,0,1920/2,1080/2)

        # Cookies
        with open(cookiefile, 'r') as file:
            cookies = json.load(file)

        filtered_cookies = [{
            key: value
            for key, value in c.items()
            if key in ('name', 'value', 'path', 'domain', 'secure')}
                            # if key in ('name', 'value', 'path', 'secure')}
                            for c in cookies]

        # Must open any URL before setting cookies
        open_url(LOGIN_PAGE_URL, driver)

        # Adds cookies
        try:
            username = re.match(r'^.+/(.+)\.', cookiefile)[1]
        except:
            username = str(cookiefile)


        logger.info('Deleting all previous cookies')
        driver.delete_all_cookies()
        logger.info('Adding cookies for user %s', username)
        for cookie in filtered_cookies:
            driver.add_cookie(cookie)

        # Daily Points
        open_url(POINTS_MALL_URL, driver)

        logger.info('Clicking CHECK-IN button.')
        checkinButtonElements = driver.find_elements_by_css_selector('.checkin-btn')
        if not len(checkinButtonElements):
            logger.error("Couldn't find CHECK-IN button. Moving on...")
        elif 'gray' in checkinButtonElements[0].get_attribute('class'):
            logger.warning("Already clicked for today!")
        else:
            try:
                checkinButtonElements[0].click()
            except Exception as e:
                logger.critical('Something wrong happened', exc_info=True)
            else:
                logger.info('Clicked button! Moving on...')

        # Opens page and clicks button
        count = 0
        while True:
            open_url(LOTTERY_URL, driver)

            playButtonElements = driver.find_elements_by_css_selector(
                '.lucky-draw-main .main-wrap .lucky-block .lucky-wrap .lottery-block .lottery .lottery-nine-wrap li.play-nine h2'
            )
            if len(playButtonElements):
                logger.info('Clicking PLAY button.')
                playButtonElements[0].click()
            time.sleep(2)

            logger.info('Clicked button! Checking results...')

            # First check if we're done
            modalLimitedElements = driver.find_elements_by_css_selector(
                '.modal-bginfo .cont, .modal-bgmsg .cont')
            if len(modalLimitedElements) > 0:
                logger.warning('No more attempts! Moving on...')
                break

            # Then check the modals
            # modalsPrizeElements = driver.find_elements_by_xpath("//div[@class='.popue-mask and style='display: block;']")
            modalPrizeElements = None
            possibleModalsElements = driver.find_elements_by_css_selector('.popue-mask')
            for modal in possibleModalsElements:
                style = modal.get_attribute('style')
                if 'display: block' in style:
                    modalPrizeElements = modal.find_elements_by_css_selector('.popue .disc')

            if len(modalPrizeElements) > 0:
                rewardText = modalPrizeElements[0].text
                if 'Insufficient Points' in rewardText:
                    logger.warning('Not enough points! Moving on...')
                    break

                if 'notice your email' in rewardText:
                    logger.critical('Holy shit!\n%s')
                    with open('/home/esauvisky/holyshit.txt', 'x') as file:
                        file.write(
                            'You fucking won the prize with the account ' + username
                            + '\nThe prize is: ' + rewardText)

                logger.info('%s. Can continue!', rewardText)
                continue

            logger.critical('No modal was found :( Trying again')
            count = count + 1
            if count >= 5:
                logger.critical('Too many attempts. Bye Bye!')
                break

        driver.quit()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-l", "--learn", action="store", dest="username",
        help="Learn mode to grab cookies for one particular username")

    parser.add_argument(
        "-q", "--quiet", action="store_true",
        help="Uses headless mode and does not open the chrome UI.")

    parser.add_argument('cookies', nargs='+', help="List of cookie files to use in JSON format.")

    parser.add_argument(
        "-v", "--verbose", action="count", default=1, help="Verbosity (-v, -vv, etc)")

    # Specify output of "--version"
    parser.add_argument(
        "--version", action="version",
        version="%(prog)s (version {version})".format(version=__version__))

    logzero.loglevel(logzero.logging.DEBUG)
    args = parser.parse_args()
    main(args)
