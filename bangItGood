#!/usr/bin/env python3
"""
Module Docstring
"""


'''

TODO TODO TODO
https://www.banggood.com/index.php?com=account&t=vipClub
TODO TODO TODO


'''
__author__ = "Your Name"
__version__ = "0.1.0"
__license__ = "MIT"

import argparse
import json
import re
from glob import glob
from pathlib import Path
import time
import random
import getpass

import logzero
from logzero import logger
from selenium import common, webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.action_chains import ActionChains

POINTS_MALL_URL = "https://www.banggood.com/pointsmall.html"
LOGIN_PAGE_URL = "https://www.banggood.com/login.html"
LOTTERY_URL = "https://www.banggood.com/index.php?com=lottery&t=lotteryDraw&lottery_id=17"
VIP_CENTER_URL = "https://www.banggood.com/index.php?com=account&t=vipCenter_v2"
DAILY_BONUS_URL = "https://www.banggood.com/index.php?com=account&t=dailybonus"

LOTTERY_URL_UNKNOWN = True


def save_credentials():
    while True:
        username = input('Type your username: ')
        password = password = getpass.getpass("Type your password: ")

        logger.info('Will try to log in, check if it works!')

        browser = webdriver.Chrome()
        browser.get(LOGIN_PAGE_URL)
        browser.find_element_by_id('login-email').send_keys(username)
        browser.find_element_by_id('login-pwd').send_keys(password)
        browser.find_element_by_id('login-submit').click()

        logger.warn('If it doesnt work, press Enter and try again!')
        yn = input('Did it work? [y/N]')

        if yn == 'y' or yn == 'Y':
            try:
                with open('credentials.json') as file:
                    credentials = json.load(file)
                    print('loaded previous credentials.json')
            except:
                print('previous credentials doesnt exist or is empty')
                credentials = []
            finally:
                credentials.append((username, password))
                print('saved new credentials')

            with open('credentials.json', 'w') as file:
                print('saving json')
                json.dump(credentials, file, indent=4, sort_keys=True)

            break

    exit(0)


def increase_url_int_param(param, url):
    """
    Increases any GET integer parameter by one

    Args:
        param (string): the name of the parameter to search for (e.g.: 'lottery_id')
        url   (string): the URL in where to search for
                        e.g.: "https://www.banggood.com/index.php?com=lottery&t=lotteryDraw&lottery_id=12"

    Returns:
        [string]: the URL with an increased id for the specified parameter. e.g.:
            "https://www.banggood.com/index.php?com=lottery&t=lotteryDraw&lottery_id=13"
    """
    oldId = re.search(rf"{param}=(\d+)", url)
    newId = str(oldId[0]).replace(str(oldId[1]), str(int(oldId[1]) + 1))
    return url.replace(oldId[0], newId)


def open_url(url, driver):
    """
    Opens an URL with a timeout

    Args:
        url ([type]): [description]
        driver ([type]): [description]
    """
    # (sometimes it hangs up)
    driver.implicitly_wait(30)
    driver.set_page_load_timeout(45)
    # Alternative: https://intellipaat.com/community/10338/how-do-i-set-the-selenium-webdriver-get-timeout
    # WebDriverWait(driver,)

    try:
        logger.info('Opening %s', url)
        driver.get(url)
    except common.exceptions.TimeoutException:
        logger.warning('Got stuck at %s. Continuing...', url)
        driver.execute_script("window.stop();")
    except Exception as e:
        logger.critical('Some weird error happened! Will continue but meh...', exc_info=True)
        driver.execute_script("window.stop();")


def main(args):
    """ Main entry point of the app """
    global LOTTERY_URL
    global LOTTERY_URL_UNKNOWN

    try:
        with open('credentials.json') as file:
            credentials = json.load(file)
    except:
        logger.error('Something wrong with credentials file. Exiting', exc_info=True)
        exit(1)

    for username, password in credentials:

        # Creates Driver
        options = webdriver.ChromeOptions()
        if args.quiet: options.add_argument('headless')
        # options.add_argument('user-data-dir=./chrome-profile/')

        driver = webdriver.Chrome(options=options)
        action = ActionChains(driver)
        if not args.quiet: driver.set_window_rect(380,0,1560,750)


        # Must open any URL before setting cookies
        open_url(LOGIN_PAGE_URL, driver)

        driver.find_element_by_id('login-email').send_keys(username)
        driver.find_element_by_id('login-pwd').send_keys(password)
        driver.find_element_by_id('login-submit').click()

        # Daily Points
        open_url(POINTS_MALL_URL, driver)

        checkinButtonElements = driver.find_elements_by_css_selector('.checkin-btn')
        if not len(checkinButtonElements):
            logger.error("Couldn't find CHECK-IN button. Moving on...")
        elif 'gray' in checkinButtonElements[0].get_attribute('class'):
            logger.warning("Already clicked for today!")
        else:
            try:
                logger.info('Clicking CHECK-IN button. (%s elements in total).', len(checkinButtonElements))
                checkinButtonElements[0].click()
            except common.exceptions.ElementNotInteractableException:
                logger.error('Button is non interactable, probably means already clicked! Moving on...', exc_info=True)
            except Exception as e:
                logger.critical('Something wrong happened', exc_info=True)
            else:
                logger.info('Clicked button! Moving on...')

        # # Gets lottery URL from Daily Points webpage:
        # repeat_times = 3  # if 'esauvisky' in username else 3
        # pointMallSourceCode = driver.page_source
        # lotteryUrlElements = driver.find_elements_by_xpath('//a[contains(@href, "lottery_id")]')
        # if len(lotteryUrlElements):
        #     # If found, use it from now on
        #     LOTTERY_URL = lotteryUrlElements[0].get_attribute("href")
        #     logger.info('Found lottery URL in the daily webpage! Hurray! The URL ends with: %s', LOTTERY_URL[-25:])
        #     LOTTERY_URL_UNKNOWN = False
        # else:
        #     # Otherwise, use the hardcoded URL and count on 'activity is over' to increase ID until found
        #     # logger.warning("Shit, didn't find any lottery URL, will use the hardcoded one.")
        #     logger.warning("Shit, didn't find any lottery URL, will not play.")
        #     repeat_times = 0

        # # Opens lottery url and clicks button
        # count = 0
        # for attempt in range(0, repeat_times):  # tries only three times to avoid the spending all points bug
        #     open_url(LOTTERY_URL, driver)

        #     playButtonElements = driver.find_elements_by_css_selector('.lottery .play-nine, .lottery .play-turn')

        #     if len(playButtonElements):
        #         logger.info('Attempt nÂ° %s: Clicking PLAY button (%s elements in total).', attempt, len(playButtonElements))
        #         action.move_to_element_with_offset(playButtonElements[0], random.randint(5, 20), random.randint(5, 20)).perform()
        #         time.sleep(random.randint(0, 5))
        #         playButtonElements[0].click()
        #         logger.info('Clicked button! Checking results...')
        #     else:
        #         logger.critical('Did not found any play button! :( Trying again...')
        #         count = count + 1
        #         if count >= 5:
        #             logger.critical('Too many attempts. Bye Bye!')
        #             break
        #         continue

        #     modalPrizeElements = driver.find_elements_by_xpath('//div[contains(@class, "popue-mask") and contains(@style, "display: block;")]')
        #     if len(modalPrizeElements) > 0:
        #         modalClass = modalPrizeElements[0].get_attribute('class')
        #         rewardText = modalPrizeElements[0].text
        #         for goodClass in ['coupon', 'prize']:
        #             if goodClass in modalClass:
        #                 with open(str(Path.home()) + '/banggood.txt', 'a') as file:
        #                     file.write(username + ' got: ' + rewardText + '\n')

        #         if 'Insufficient Points' in rewardText:
        #             logger.warning('Not enough points! Moving on...')
        #             break

        #         if 'notice your email' in rewardText:
        #             logger.critical('Holy shit!\n%s')
        #             with open(str(Path.home()) + '/holyshit.txt', 'a') as file:
        #                 file.write('You fucking won the prize with the account ' + username + '\nThe prize is: ' + rewardText)

        #         logger.info('%s. Can continue!', rewardText)
        #         continue

        #     # Check if we're done (i.e.: three daily attempts were used)
        #     modalLimitedElements = driver.find_elements_by_css_selector('.cont')
        #     if len(modalLimitedElements) > 0:
        #         modalLimitedText = modalLimitedElements[0].text
        #         if 'activity is over' in modalLimitedText and LOTTERY_URL_UNKNOWN:
        #             logger.warning("This doesn't look like the current lottery, increasing ID by one and trying again.")
        #             LOTTERY_URL = increase_url_int_param('lottery_id', LOTTERY_URL)
        #             continue
        #         elif any(endText in modalLimitedText for endText in ['no more attempts', 'times of usage', 'is limited']):
        #             logger.warning('No more attempts! Moving on...')
        #             break

        #     logger.critical('No modal was found :( Trying again')
        #     count = count + 1
        #     if count >= 5:
        #         logger.critical('Too many attempts. Bye Bye!')
        #         break

        # # VIP CENTER
        # open_url(VIP_CENTER_URL, driver)
        # couponHoverBonus = driver.find_elements_by_xpath('//li[contains(@class, "daily_bonus") and contains(@class, "coupon_hover")]')
        # if len(couponHoverBonus) > 0:
        #     logger.info("Found daily bonus icon, hovering icon...")
        #     try:
        #         action.move_to_element(couponHoverBonus[0]).click().perform()
        #     except Exception:
        #         logger.error("Couldn't perform the daily bonus on this page, probably means it's not available.")
        #     else:
        #         buttonsDailyBonus = driver.find_elements_by_xpath('//li[contains(@class, "daily_bonus")]//span[@class="get_coupon"]')
        #         if len(buttonsDailyBonus) > 0:
        #             logger.info('Clicking "Get It" button...')
        #             buttonsDailyBonus[0].click()

        #             congratsButtons = driver.find_elements_by_xpath('//div[@class="pop2")]//a[@class="check_bgpay_btn"]')
        #             redeemButtons = driver.find_elements_by_xpath('//div[@class="pop1")]//a[@class="redeem_btn"]')
        #             if len(redeemButtons):
        #                 logger.info("Redeeming coins...")
        #                 redeemButtons[0].click()
        #             elif len(congratsButtons):
        #                 logger.info("Uhhh... Congrats button!")
        #                 congratsButtons[0].click()

        # DAILY BONUS
        # for _ in range(0, 2):
        #     open_url(DAILY_BONUS_URL, driver)
        #     eggHoverBonus = driver.find_elements_by_xpath('//div[contains(@class, "egg-cnt")]')
        #     if len(eggHoverBonus):
        #         move_to = action.move_to_element(eggHoverBonus[0])
        #         eggHoverBonus[0].click()
        #         eggDailyBonusesModals = driver.find_elements_by_xpath('//div[contains(@class, "foot")]//li[contains(@class, "confirm")]')
        #         if len(eggDailyBonusesModals) > 0:
        #             for eggDailyBonusConfirm in eggDailyBonusesModals:
        #                 if eggDailyBonusConfirm.location['x'] > 0:
        #                     try:
        #                         logger.info('Clicking "Confirm" button...')
        #                         eggDailyBonusConfirm.click()
        #                         logger.info('Waiting some seconds...')
        #                         time.sleep(random.randint(5, 10))
        #                         logger.info('TODO: checking result modal')
        #                     except:
        #                         logger.warning('Wrong button! Moving on...')
        #         else:
        #             logger.error("Couldn't find the modal! :(")
        #             break
        #     else:
        #         logger.error("Couldn't find the egg! :( Giving up...")
        #         break

        driver.quit()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("-s", "--setup", action="store_true", help="Learn mode to save new credentials")

    parser.add_argument("-q", "--quiet", action="store_true", help="Uses headless mode and does not open the chrome UI.")

    parser.add_argument("-v", "--verbose", action="count", default=1, help="Verbosity (-v, -vv, etc)")

    # Specify output of "--version"
    parser.add_argument("--version", action="version", version="%(prog)s (version {version})".format(version=__version__))

    logzero.loglevel(logzero.logging.DEBUG)
    args = parser.parse_args()
    logger.setLevel(args.verbose)
    logger.debug(args)

    if args.setup:
        save_credentials()

    main(args)
